datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String       @unique
  email        String       @unique
  fullName     String
  password     String
  accountType  AccountType  @default(USER)
  thumbnail     String?
  mobileNumber String?
  isActive     Boolean      @default(true)
  sessionToken String?      @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  courses      Course[] // Courses created by the user (if admin)
  enrollments  Enrollment[]
  orders       Order[]
}

model Otp {
  id         String   @id @default(cuid())
  email      String   @unique
  otp        String
  otpExpires DateTime
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  price       Float
  thumbnail   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  sections    Section[]
  enrollments Enrollment[]
  orders      Order[]
}

model Section {
  id          String       @id @default(cuid())
  title       String
  order       Int
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    String
  subsections Subsection[]
}

model Subsection {
  id          String  @id @default(cuid())
  title       String
  description String
  videoUrl    String
  order       Int
  section     Section @relation(fields: [sectionId], references: [id])
  sectionId   String
}

model Enrollment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Order {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id])
  userId            String
  course            Course      @relation(fields: [courseId], references: [id])
  courseId          String
  amount            Float
  status            OrderStatus @default(PENDING)
  razorpayOrderId   String      @unique
  razorpayPaymentId String?     @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

enum AccountType {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}
